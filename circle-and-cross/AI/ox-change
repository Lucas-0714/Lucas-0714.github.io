<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>圈圈叉叉</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f0f0; /* 素色背景 */
        }
        .container {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin-bottom: 20px;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: #ddd;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            cursor: pointer;
        }
        .controls button {
            padding: 10px 20px;
            margin: 5px;
            font-size: 1em;
            cursor: pointer;
        }
        #result {
            font-size: 1.2em;
            margin-bottom: 10px;
        }
        #difficulty-select {
            padding: 8px;
            font-size: 1em;
            margin-bottom: 10px;
        }
        #ai-thinking {
            font-style: italic;
            color: #777;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>圈圈叉叉</h1>
    <label for="difficulty-select">選擇難度：</label>
    <select id="difficulty-select">
        <option value="easy">簡單</option>
        <option value="medium">中等</option>
        <option value="hard">困難</option>
    </select>
    <div id="result"></div>
    <div id="ai-thinking"></div>
    <div class="container">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
    </div>
    <div class="controls">
        <button id="restart-button">重新開始</button>
    </div>

    <script>
        // JavaScript 程式碼將放在這裡
        const cells = document.querySelectorAll('.cell');
        const resultDisplay = document.getElementById('result');
        const restartButton = document.getElementById('restart-button');
        const difficultySelect = document.getElementById('difficulty-select');
        const aiThinkingDisplay = document.getElementById('ai-thinking');

        let currentPlayer = 'O';
        let board = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;
        let aiDifficulty = 'easy';

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        function handleCellClick(clickedCellEvent) {
            const clickedCell = clickedCellEvent.target;
            const clickedCellIndex = parseInt(clickedCell.dataset.index);

            if (board[clickedCellIndex] !== '' || !gameActive) {
                return;
            }

            board[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;
            clickedCell.classList.add(currentPlayer === 'O' ? 'playerO' : 'playerX'); // 可選：添加樣式

            checkWin();
            if (gameActive && currentPlayer === 'O') {
                currentPlayer = 'X';
                setTimeout(aiTurn, 500); // 模擬 AI 思考時間
            }
        }

        function checkWin() {
            for (let i = 0; i <= 7; i++) {
                const winCondition = winningConditions[i];
                const a = board[winCondition[0]];
                const b = board[winCondition[1]];
                const c = board[winCondition[2]];
                if (a === '' || b === '' || c === '') {
                    continue;
                }
                if (a === b && b === c) {
                    gameActive = false;
                    resultDisplay.textContent = `${currentPlayer === 'O' ? '你' : 'AI'} 贏了！`;
                    return;
                }
            }

            if (!board.includes('')) {
                gameActive = false;
                resultDisplay.textContent = '平手！';
            }
        }

        function aiTurn() {
            if (!gameActive) return;

            aiThinkingDisplay.textContent = 'AI 思考中...';
            setTimeout(() => {
                let bestMove;
                if (aiDifficulty === 'very-hard') {
                    bestMove = getBestMove(board, 'X');
                } else if (aiDifficulty === 'hard') {
                    // 這裡的困難模式現在也會阻止玩家獲勝
                    bestMove = getBestMove(board, 'X');
                } else if (aiDifficulty === 'medium') {
                    if (Math.random() < 0.7) {
                        bestMove = getBestMove(board, 'X');
                    } else {
                        bestMove = getRandomEmptyCell(board);
                    }
                } else if (aiDifficulty === 'slightly-hard') {
                    bestMove = getSlightlyHardMove(board, 'X');
                } else { // easy, very-easy
                    bestMove = getRandomEmptyCell(board);
                }

                if (bestMove !== undefined) {
                    board[bestMove] = 'X';
                    cells[bestMove].textContent = 'X';
                    cells[bestMove].classList.add('playerO'); // 可選：添加樣式
                    checkWin();
                    if (gameActive) {
                        currentPlayer = 'O';
                    }
                }
                aiThinkingDisplay.textContent = '';
            }, Math.random() * 1000 + 500); // 0.5 到 1.5 秒的隨機思考時間
        }

        function getRandomEmptyCell(currentBoard) {
            const emptyCells = currentBoard.reduce((acc, val, index) => {
                if (val === '') acc.push(index);
                return acc;
            }, []);
            return emptyCells[Math.floor(Math.random() * emptyCells.length)];
        }

        function getSlightlyHardMove(currentBoard, player) {
            // 優先選擇獲勝的步
            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                const line = [currentBoard[a], currentBoard[b], currentBoard[c]];
                const emptyIndex = line.indexOf('');
                const playerPieces = line.filter(piece => piece === player).length;

                if (playerPieces === 2 && emptyIndex !== -1) {
                    return winningConditions[i][emptyIndex];
                }
            }
            // 否則隨機選擇
            return getRandomEmptyCell(currentBoard);
        }

        // Minimax 演算法 (困難和非常困難模式)
        function getBestMove(currentBoard, player) {
            const availableSpots = currentBoard.reduce((acc, val, index) => {
                if (val === '') acc.push(index);
                return acc;
            }, []);

            if (checkWinForPlayer(currentBoard, 'O')) {
                return -10;
            } else if (checkWinForPlayer(currentBoard, 'X')) {
                return 10;
            } else if (availableSpots.length === 0) {
                return 0;
            }

            const moves = [];
            for (let i = 0; i < availableSpots.length; i++) {
                const move = {};
                move.index = availableSpots[i];
                currentBoard[availableSpots[i]] = player;

                let result;
                if (player === 'X') {
                    result = getBestMove(currentBoard, 'O');
                } else {
                    result = getBestMove(currentBoard, 'X');
                }
                move.score = result;
                currentBoard[availableSpots[i]] = '';
                moves.push(move);
            }

            let bestMove;
            if (player === 'X') {
                let bestScore = -Infinity;
                for (let i = 0; i < moves.length; i++) {
                    if (moves[i].score > bestScore) {
                        bestScore = moves[i].score;
                        bestMove = i;
                    }
                }
            } else {
                let bestScore = Infinity;
                for (let i = 0; i < moves.length; i++) {
                    if (moves[i].score < bestScore) {
                        bestScore = moves[i].score;
                        bestMove = i;
                    }
                }
            }

            return moves[bestMove].index;
        }

        function checkWinForPlayer(boardToCheck, player) {
            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                if (boardToCheck[a] === player && boardToCheck[b] === player && boardToCheck[c] === player) {
                    return true;
                }
            }
            return false;
        }

        function startGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            gameActive = true;
            currentPlayer = 'X';
            resultDisplay.textContent = '';
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('playerX', 'playerO'); // 移除樣式
            });
            aiThinkingDisplay.textContent = '';
            if (difficultySelect.value === 'very-hard' && currentPlayer === 'O') {
                setTimeout(aiTurn, 500);
            }
        }

        cells.forEach(cell => {
            cell.addEventListener('click', handleCellClick);
        });

        restartButton.addEventListener('click', startGame);

        difficultySelect.addEventListener('change', () => {
            aiDifficulty = difficultySelect.value;
            // 更改難度後，更新下拉選單的選項
            difficultySelect.innerHTML = `
                <option value="very-easy" ${aiDifficulty === 'very-easy' ? 'selected' : ''}>非常簡單</option>
                <option value="easy" ${aiDifficulty === 'easy' ? 'selected' : ''}>簡單</option>
                <option value="slightly-hard" ${aiDifficulty === 'slightly-hard' ? 'selected' : ''}>稍有難度</option>
                <option value="medium" ${aiDifficulty === 'medium' ? 'selected' : ''}>中等</option>
                <option value="hard" ${aiDifficulty === 'hard' ? 'selected' : ''}>困難</option>
                <option value="very-hard" ${aiDifficulty === 'very-hard' ? 'selected' : ''}>非常困難</option>
            `;
            startGame(); // 更改難度後重新開始遊戲
        });

        // 遊戲開始時初始化
        // 初始化下拉選單的選項
        difficultySelect.innerHTML = `
            <option value="very-easy">非常簡單</option>
            <option value="easy">簡單</option>
            <option value="slightly-hard">稍有難度</option>
            <option value="medium">中等</option>
            <option value="hard">困難</option>
            <option value="very-hard" selected>非常困難</option>
        `;
        startGame();
    </script>
</body>
</html>
